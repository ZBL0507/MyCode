【幂等性】
    [幂等的数学概念]：
        幂等是源于一种数学概念。其主要有两个定义
        如果在一元运算中，x 为某集合中的任意数，如果满足 f(x) = f(f(x)) ，那么该 f 运算具有幂等性，
            比如绝对值运算 abs(a) = abs(abs(a)) 就是幂等性函数。
        如果在二元运算中，x 为某集合中的任意数，如果满足 f(x,x) = x，前提是 f 运算的两个参数均为 x，
            那么我们称 f 运算也有幂等性，比如求大值函数 max(x,x) = x 就是幂等性函数。

    [幂等性在开发中的概念]：
       对于同一个系统，在同样条件下，一次请求和重复多次请求对资源的影响是一致的，就称该操作为幂等的。

       特别是对于现在分布式系统下的 RPC 或者 Restful 接口互相调用的情况下，
            很容易出现由于网络错误等等各种原因导致调用的时候出现异常而需要重试，
            这时候就必须保证接口的幂等性，否则重试的结果将与第一次调用的结果不同，
            如果有个接口的调用链 A->B->C->D->E，在 D->E 这一步发生异常重试后返回了错误的结果，A,B,C也会受到影响，这将会是灾难性的。

       在生活中常见的一些要求幂等性的例子：
            - 博客系统同一个用户对同一个文章点赞，即使这人单身30年手速疯狂按点赞，那么实际上也只能给这个文章 +1 赞
            - 在微信支付的时候，一笔订单应当只能扣一次钱，那么无论是网络问题或者bug等而重新付款，都只应该扣一次钱

    [Http 协议与幂等性]:
        如果把操作按照功能分类，那就是增删改查四种，在 http 协议中则表现为 Get、Post、Put、Delete 四种。
        查询操作 (Get)
            Get 方法用于获取资源，不应当对系统资源进行改变，所以是幂等的。注意这里的幂等提现在对系统资源的改变，
            而不是返回数据的结果，即使返回结果不相同但是该操作本身没有副作用，所以幂等。
        删除操作 (Delete)
            Delete 方法用于删除资源，虽然改变了系统资源，但是第一次和第N次删除操作对系统的作用是相同的，所以是幂等的。
            比如要删除一个 id 为 1234 的资源，可能第一次调用时会删除，而后面所有调用的时候由于系统中已经没有这个 id 的资源了，
            但是第一次操作和后面的操作对系统的作用是相同的，所以这也是幂等的，调用者可以多次调用这个接口不必担心错误。
        修改操作 (Put)
            修改操作有可能是幂等的也可能不幂等。如果修改的资源为固定的，比如说把账户中金额改为 1000 元，无论调用几次都是幂等的。
            假如资源不固定，比如账户中金额减少50元，调用一次和调用多次的结果肯定不一样，这时候就不幂等了。
        新增操作 (Post)
            Post 新增操作天生就不是一个幂等操作，其在 http 协议的定义如下：
            The POST method is used to request that the origin server accept the entity enclosed in the request as
            a new subordinate of the resource identified by the Request-URI in the Request-Line.
            在其定义中表明了 Post 请求用于创建新的资源，这意味着每次调用都会在系统中产生新的资源，所以该操作注定不是幂等操作。
            这时候想要幂等就必须在业务中实现

    [实现幂等性的方案]:
        去重表
            利用数据库的特性来实现幂等。通常是在表上构建一个唯一索引，那么只要某一个数据构建完毕，后面再次操作也无法成功写入。
            常见的业务就是博客系统点赞功能，一个用户对一个博文点赞后，就把用户 id 与 博文 id 绑定，后续该用户点赞同一个博文就无法插入了。
                或是在金融系统中，给用户创建金融账户，一个用户肯定不能有多个账户，就在账户表中增加唯一索引来存储用户 id，
                这样即使重复操作用户也只能拥有一个账户。
        状态标识
            状态标识是很常见的幂等设计方式，主要思路就是通过状态标识的变更，保证业务中每个流程只会在对应的状态下执行，
                如果标识已经进入下一个状态，这时候来了上一个状态的操作就不允许变更状态，保证了业务的幂等性。
            状态标识经常用在业务流程较长，修改数据较多的场景里。最经典的例子就是订单系统，假如一个订单要经历
                创建订单 ->  订单支付\取消 -> 账户计算 -> 通知商户 这四个步骤。
                那么就有可能一笔订单支付完成后去账户里扣除对应的余额，消耗对应的优惠卷。
                但是由于网络等原因返回了错误信息，这时候就会重试再次去进行账户计算步骤造成数据错误。
            所以为了保证整个订单流程的幂等性，可以在订单信息中增加一个状态标识，一旦完成了一个步骤就修改对应的状态标识。
                比如订单支付成功后，就把订单标识为修改为支付成功，现在再次调用订单支付或者取消接口，会先判断订单状态标识，
                如果是已经支付过或者取消订单，就不会再次支付了。
        Token 机制
            Token 机制应该是适用范围最广泛的一种幂等设计方案了，具体实现方式也很多样化。但是核心思想就是每次操作都生成一个唯一 Token 凭证，
                服务器通过这个唯一凭证保证同样的操作不会被执行两次。这个 Token 除了字面形式上的唯一字符串，
                也可以是多个标志的组合（比如上面提到的状态标志），甚至可以是时间段标识等等。
            举个例子，在论坛中发布一个新帖子，这是一个典型的 Post 新增操作，要怎样防止用户多次点击提交导致产生多个同样的帖子呢。
                可以让用户提交的时候带一个唯一 Token，服务器只要判断该 Token 存在了就不允许提交，便能保证幂等性。
            上面这个例子比较容易理解，但是业务比较简单。由于 Token 机制适用较广，所以其设计中要注意的要求也会根据业务不同而不同。
            Token 在何时生成，怎么生成？这是该机制的核心，就拿上面论坛系统来说，如果你在用户提交帖子的时候才生成 Token，
                那用户每次点提交都会生成新的 Token 然后都能提交成功，就不是幂等的了。必须在用户提交内容之前，
                比如进入编辑页面的时候生成 Token，用户在提交的时候内容带着 Token 一起提交，对于同一个页面无论用户提交多少次，就至多能成功一次。
                所以 Token 生成的时机必须保证能够使该操作具多次执行都是相同的效果才行。使用 Token 机制就要求开发者对业务流程有较好的理解。



【分布式】
    分布式系统是由一组通过网络进行通信、为了完成共同的任务而协调工作的计算机节点组成的系统。
    分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用更多的机器，处理更多的数据。

    [分布式系统带来的问题]：
        - 分布式锁

        - 分布式session

        - 分布式事务
            现在分布式系统成为了主流，但使用分布式也随之带来了一些问题和痛点，分布式事务就是最常见的一个问题，介绍分布式事务的一些常见解决方案。
            1. 两阶段提交方案/XA方案
                两阶段提交，有一个事务管理器的概念，负责协调多个数据库（资源管理器）的事务，事务管理器先问问各个数据库你准备好了吗？
                    如果每个数据库都回复ok，那么就正式提交事务，在各个数据库上执行操作；如果任何一个数据库回答不ok，那么就回滚事务。
                这种分布式事务方案，比较适合单块应用里，跨多个库的分布式事务，而且因为严重依赖于数据库层面来搞定复杂的事务，效率很低，
                    绝对不适合高并发的场景。如果要玩儿，那么基于spring + JTA就可以搞定。
                这个方案很少用，一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。
                    现在微服务，一个大的系统分成几百个服务，几十个服务。一般来说，我们的规定和规范，是要求说每个服务只能操作自己对应的一个数据库。
                    如果你要操作别的服务对应的库，不允许直连别的服务的库，违反微服务架构的规范，如果你要操作别人的服务的库，
                    你必须是通过调用别的服务的接口来实现，绝对不允许你交叉访问别人的数据库！

            2. TCC方案
                TCC的全程是：Try、Confirm、Cancel。
            　　这个其实是用到了补偿的概念，分为了三个阶段：
            　　1）Try阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行锁定或者预留
            　　2）Confirm阶段：这个阶段说的是在各个服务中执行实际的操作
            　　3）Cancel阶段：如果任何一个服务的业务方法执行出错，那么这里就需要进行补偿，就是执行已经执行成功的业务逻辑的回滚操作。
            　　这种方案说实话几乎很少用人使用，因为这个事务回滚实际上是严重依赖于你自己写代码来回滚和补偿了，会造成补偿代码巨大，非常之恶心。
            　　比较适合的场景：这个就是除非你是真的一致性要求太高，是你系统中核心之核心的场景，比如常见的就是资金类的场景，
                    那你可以用TCC方案了，自己编写大量的业务逻辑，自己判断一个事务中的各个环节是否ok，不ok就执行补偿/回滚代码。

            3. 本地消息表
                本地消息表是国外的ebay搞出来的这么一套思想
            　　本地消息表来实现分布式事务的思路大致如下：
            　　1）A系统在自己本地一个事务里操作同时，插入一条数据到消息表
            　　2）接着A系统将这个消息发送到MQ中去
            　　3）B系统接收到消息之后，在一个事务里，往自己本地消息表里插入一条数据，同时执行其他的业务操作，如果这个消息已经被处理过了，
                    那么此时这个事务会回滚，这样保证不会重复处理消息
            　　4）B系统执行成功之后，就会更新自己本地消息表的状态以及A系统消息表的状态
            　　5）如果B系统处理失败了，那么就不会更新消息表状态，那么此时A系统会定时扫描自己的消息表，如果有没处理的消息，会再次发送到MQ中去，让B再次处理
            　　6）这个方案保证了最终一致性，哪怕B事务失败了，但是A会不断重发消息，直到B那边成功为止。
            　　    这个方案最大的弊端在于依赖于数据库消息表来保证事务，但是在高并发场景下，数据库就成了瓶颈。

            4. 可靠消息最终一致性方案
                这个方案的大致思路为：
            　　1）A系统先发送一个prepared消息到mq，如果这个prepared消息发送失败那么就直接取消操作别执行了
            　　2）如果这个消息发送成功过了，那么接着执行本地事务，如果成功就告诉mq发送确认消息，如果失败就告诉mq回滚消息
            　　3）如果发送了确认消息，那么此时B系统会接收到确认消息，然后执行本地的事务
            　　4）mq会自动定时轮询所有prepared消息回调你的接口，问你，这个消息是不是本地事务处理失败了，所有没发送确认消息？那是继续重试还是回滚？
                    一般来说这里你就可以查下数据库看之前本地事务是否执行，如果回滚了，那么这里也回滚吧。这个就是避免可能本地事务执行成功了，别确认消息发送失败了。
            　　5）这个方案里，要是系统B的事务失败了咋办？重试咯，自动不断重试直到成功，如果实在是不行，要么就是针对重要的资金类业务进行回滚，
                    比如B系统本地回滚后，想办法通知系统A也回滚；或者是发送报警由人工来手工回滚和补偿。
            　　这个方案是目前国内公司采用较多的一种方案。

            5. 最大努力通知方案
                1）系统A本地事务执行完之后，发送个消息到MQ
                2）这里会有个专门消费MQ的最大努力通知服务，这个服务会消费MQ然后写入数据库中记录下来，或者是放入个内存队列也可以，接着调用系统B的接口
                3）要是系统B执行成功就ok了；要是系统B执行失败了，那么最大努力通知服务就定时尝试重新调用系统B，反复N次，最后还是不行就放弃。


