【幂等性】
    [幂等的数学概念]：
        幂等是源于一种数学概念。其主要有两个定义
        如果在一元运算中，x 为某集合中的任意数，如果满足 f(x) = f(f(x)) ，那么该 f 运算具有幂等性，
            比如绝对值运算 abs(a) = abs(abs(a)) 就是幂等性函数。
        如果在二元运算中，x 为某集合中的任意数，如果满足 f(x,x) = x，前提是 f 运算的两个参数均为 x，
            那么我们称 f 运算也有幂等性，比如求大值函数 max(x,x) = x 就是幂等性函数。

    [幂等性在开发中的概念]：
       对于同一个系统，在同样条件下，一次请求和重复多次请求对资源的影响是一致的，就称该操作为幂等的。

       特别是对于现在分布式系统下的 RPC 或者 Restful 接口互相调用的情况下，
            很容易出现由于网络错误等等各种原因导致调用的时候出现异常而需要重试，
            这时候就必须保证接口的幂等性，否则重试的结果将与第一次调用的结果不同，
            如果有个接口的调用链 A->B->C->D->E，在 D->E 这一步发生异常重试后返回了错误的结果，A,B,C也会受到影响，这将会是灾难性的。

       在生活中常见的一些要求幂等性的例子：
            - 博客系统同一个用户对同一个文章点赞，即使这人单身30年手速疯狂按点赞，那么实际上也只能给这个文章 +1 赞
            - 在微信支付的时候，一笔订单应当只能扣一次钱，那么无论是网络问题或者bug等而重新付款，都只应该扣一次钱

    [Http 协议与幂等性]:
        如果把操作按照功能分类，那就是增删改查四种，在 http 协议中则表现为 Get、Post、Put、Delete 四种。
        查询操作 (Get)
            Get 方法用于获取资源，不应当对系统资源进行改变，所以是幂等的。注意这里的幂等提现在对系统资源的改变，
            而不是返回数据的结果，即使返回结果不相同但是该操作本身没有副作用，所以幂等。
        删除操作 (Delete)
            Delete 方法用于删除资源，虽然改变了系统资源，但是第一次和第N次删除操作对系统的作用是相同的，所以是幂等的。
            比如要删除一个 id 为 1234 的资源，可能第一次调用时会删除，而后面所有调用的时候由于系统中已经没有这个 id 的资源了，
            但是第一次操作和后面的操作对系统的作用是相同的，所以这也是幂等的，调用者可以多次调用这个接口不必担心错误。

