【Spring 循环依赖】
    Spring官网解释
    Circular dependencies
    If you use predominantly constructor injection, it is possible to create an unresolvable circular dependency scenario.

    For example: Class A requires an instance of class B through constructor injection,
    and class B requires an instance of class A through constructor injection.
    If you configure beans for classes A and B to be injected into each other,
    the Spring IoC container detects this circular reference at runtime,
    and throws a BeanCurrentlyInCreationException.

    One possible solution is to edit the source code of some classes to be configured by setters
    rather than constructors.
    Alternatively, avoid constructor injection and use setter injection only.
    In other words, although it is not recommended,
    you can configure circular dependencies with setter injection.

    Unlike the typical case (with no circular dependencies),
    a circular dependency between bean A and bean B forces one of the beans to be injected
    into the other prior to being fully initialized itself (a classic chicken-and-egg scenario).

    三级缓存解决循环依赖：
        一级缓存：
        /** Cache of singleton objects: bean name to bean instance. */
    	private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);

    	三级缓存：
    	/** Cache of singleton factories: bean name to ObjectFactory. */
        private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);

        二级缓存：
        /** Cache of early singleton objects: bean name to bean instance. */
        private final Map<String, Object> earlySingletonObjects = new ConcurrentHashMap<>(16);

    1. A创建过程中需要B， 于是A将自己放到三级缓存里面去， 去实例化B
    2. B实例化的时候发现需要A， 于是B先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了A
        然后把三级缓存里面的这个A放到二级缓存里面，并删除三级缓存里面的A
    3. B顺利初始化完毕，将自己放到一级缓存里面去（此时B里面的A依然是创建中状态）
        然后回来接着创建A，此时B已经创建结束，直接从一级缓存里面拿到B，然后完成创建，并将A自己放到一级缓存里面
