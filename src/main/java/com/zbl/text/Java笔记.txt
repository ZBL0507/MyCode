【面向对象的"六原则一法则"】
    1. 单一职责原则：一个类只做它该做的事情。
    2. 开闭原则：软件实体应当对扩展开放，对修改关闭。
    3. 依赖倒转原则：面向接口编程。
    4. 里氏替换原则：任何时候都可以用子类型替换掉父类型。
    5. 接口隔离原则：接口要小而专，绝不能大而全。
    6. 合成聚合复用原则：优先使用聚合或合成关系复用代码。
    7. 迪米特法则：迪米特法则又叫最少知识原则，一个对象应当对其他对象有尽可能少的了解。



【synchronized四种锁状态的升级】
    无锁状态 -> 偏向锁 -> 轻量级锁 -> 重量级锁

    偏向锁：是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，
            从而降低获取锁带来的消耗，即提高性能。
    轻量级锁：是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，
             线程不会阻塞，从而提高性能。
             轻量级锁的获取主要由两种情况：① 当关闭偏向锁功能时；② 由于多个线程竞争偏向锁导致偏向锁升级为轻量级锁。
             若当前只有一个等待线程，则该线程将通过自旋进行等待。但是当自旋超过一定的次数时，轻量级锁便会升级为重量级锁（锁膨胀）。
             另外，当一个线程已持有锁，另一个线程在自旋，而此时又有第三个线程来访时，轻量级锁也会升级为重量级锁（锁膨胀）。
    重量级锁：是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。
             重量级锁通过对象内部的监视器（monitor）实现，而其中 monitor 的本质是依赖于底层操作系统的 Mutex Lock 实现，
             操作系统实现线程之间的切换需要从用户态切换到内核态，切换成本非常高。

    monitor对象其实就是ObjectMonitor对象（C++源码）
        monitor中的_EntryList是单向链表还是双向链表？
        双向链表 -> 请查看源码（./source_code/ObjectMonitor.hpp, ./source_code/ObjectMonitor.cpp）
        摘取部分源码：
            ObjectWaiter * volatile _EntryList ;     // Threads blocked on entry or reentry.
            void *  volatile _owner;          // pointer to owning thread OR BasicLock
            ObjectWaiter * volatile _WaitSet; // LL of threads wait()ing on the monitor

            ObjectWaiter 拥有前驱和后继节点

            synchronized锁重入：
            volatile intptr_t  _recursions;   // recursion count, 0 for first entry


    java 对象头
    以 Hotspot 虚拟机为例，Hotspot 的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。
    Mark Word：默认存储对象的 HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，
        所以 Mark Word 被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。
        它会根据对象的状态复用自己的存储空间，也就是说在运行期间 Mark Word 里存储的数据会随着锁标志位的变化而变化。
    Klass Point：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。

    每一个 Java 对象都有一把看不见的锁，称为内部锁或者 Monitor 锁。每一个被锁住的对象都会和一个 monitor 关联，
        同时 monitor 中有一个 Owner 字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。

